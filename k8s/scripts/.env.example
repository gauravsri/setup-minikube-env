# =============================================================================
# Minikube Environment Configuration Template
# =============================================================================
# Copy this file to your project's scripts/.env and customize as needed

# Project Configuration
PROJECT_NAME="my-project"
PROJECT_DESCRIPTION="My Project Description"

# Template Repository Path
# For git submodule: "../setup-minikube-env"
# For local copy: "../../setup-minikube-env"
TEMPLATE_PATH="../setup-minikube-env"

# Kubernetes Configuration
NAMESPACE="${PROJECT_NAME}"

# Service Selection - Choose what you need
# Available: minio, postgres, dremio, spark, airflow, redpanda, zincsearch, dex, postfix
ENABLED_SERVICES="minio,spark,airflow"

# Service combination examples (updated for Spark on Kubernetes):
# Basic Data Stack (Spark on Kubernetes):
# ENABLED_SERVICES="minio,spark"

# Database Stack:
# ENABLED_SERVICES="postgres,minio"

# SQL Federation Stack:
# ENABLED_SERVICES="minio,postgres,dremio"

# Full Data Platform (Recommended for M4 16GB):
# ENABLED_SERVICES="postgres,minio,spark,airflow,dremio"

# Full Orchestration Stack (without Dremio):
# ENABLED_SERVICES="minio,postgres,spark,airflow"

# Streaming Platform (Spark on Kubernetes):
# ENABLED_SERVICES="redpanda,spark,minio"

# Search & Analytics:
# ENABLED_SERVICES="postgres,minio,zincsearch"

# Authentication & Communication:
# ENABLED_SERVICES="dex,postfix"

# Complete Platform (all 9 services - works on M4 16GB with Spark on Kubernetes!):
# ENABLED_SERVICES="minio,postgres,dremio,spark,airflow,redpanda,zincsearch,dex,postfix"

# =============================================================================
# MINIKUBE CONFIGURATION
# =============================================================================

# Minikube resource allocation (optimized for Apple M4 - 10 cores, 16GB RAM)
# Conservative: Leave 4 cores and 4GB for macOS
MINIKUBE_CPUS="6"             # Use 6 of 10 cores
MINIKUBE_MEMORY="12288"       # 12GB (leave 4GB for macOS)
MINIKUBE_DISK_SIZE="40g"
MINIKUBE_DRIVER="docker"      # Docker Desktop with Apple Silicon support

# For lighter workloads (1-3 services):
# MINIKUBE_CPUS="4"
# MINIKUBE_MEMORY="8192"       # 8GB
# MINIKUBE_DISK_SIZE="20g"

# Minikube addons (optional)
# MINIKUBE_ADDONS="metrics-server,dashboard,ingress"

# =============================================================================
# SERVICE-SPECIFIC CONFIGURATION
# =============================================================================

# MinIO Configuration (optimized for M4)
MINIO_STORAGE_SIZE="10Gi"      # More storage for M4
MINIO_ROOT_USER="minioadmin"
MINIO_ROOT_PASSWORD="minioadmin"
MINIO_MEMORY_REQUEST="512Mi"   # Increased for better performance
MINIO_MEMORY_LIMIT="1Gi"
MINIO_CPU_REQUEST="250m"
MINIO_CPU_LIMIT="1000m"         # M4 can handle more

# Spark Configuration - Spark on Kubernetes (No standalone cluster needed!)
# NOTE: "spark" service now deploys RBAC + PVC only (no persistent pods)
# Pods are created dynamically when jobs run via spark-submit
# Configure executor resources in your spark-submit commands or DAGs

# For Spark on Kubernetes, set these in your spark-submit:
#   --conf spark.executor.instances=2
#   --conf spark.executor.memory=2g
#   --conf spark.executor.cores=1
#   --conf spark.driver.memory=1g

# Optional: Project path for PV (if using hostPath)
# SPARK_PROJECT_PATH="/path/to/your/project"

# DEPRECATED - Standalone Spark cluster configuration (no longer used):
# SPARK_MASTER_MEMORY_REQUEST="1Gi"
# SPARK_MASTER_MEMORY_LIMIT="2Gi"
# SPARK_WORKER_REPLICAS="2"
# SPARK_WORKER_MEMORY="2G"
# SPARK_WORKER_CORES="2"

# PostgreSQL Configuration (Standalone Database Service)
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="postgres"
POSTGRES_DB="postgres"
POSTGRES_STORAGE_SIZE="5Gi"
POSTGRES_MEMORY_REQUEST="512Mi"
POSTGRES_MEMORY_LIMIT="2Gi"
POSTGRES_CPU_REQUEST="250m"
POSTGRES_CPU_LIMIT="1000m"

# Airflow Configuration
AIRFLOW_ADMIN_USER="admin"
AIRFLOW_ADMIN_PASSWORD="admin"
AIRFLOW_ADMIN_EMAIL="admin@example.com"

# Airflow Database Configuration (uses standalone postgres if enabled, or embedded)
AIRFLOW_POSTGRES_HOST="postgres"      # Set to "postgres" to use standalone service
AIRFLOW_POSTGRES_USER="airflow"
AIRFLOW_POSTGRES_PASSWORD="airflow"
AIRFLOW_POSTGRES_DB="airflow"
AIRFLOW_POSTGRES_STORAGE_SIZE="5Gi"   # Only used if postgres not in ENABLED_SERVICES
AIRFLOW_POSTGRES_MEMORY_REQUEST="512Mi"
AIRFLOW_POSTGRES_MEMORY_LIMIT="1Gi"

AIRFLOW_WEBSERVER_MEMORY_REQUEST="1Gi"
AIRFLOW_WEBSERVER_MEMORY_LIMIT="2Gi"   # More headroom
AIRFLOW_WEBSERVER_CPU_REQUEST="500m"
AIRFLOW_WEBSERVER_CPU_LIMIT="2000m"

AIRFLOW_SCHEDULER_MEMORY_REQUEST="1Gi"
AIRFLOW_SCHEDULER_MEMORY_LIMIT="2Gi"
AIRFLOW_SCHEDULER_CPU_REQUEST="500m"
AIRFLOW_SCHEDULER_CPU_LIMIT="2000m"

# Airflow executor type
AIRFLOW_EXECUTOR="LocalExecutor"  # Options: LocalExecutor, CeleryExecutor, KubernetesExecutor

# Load example DAGs
AIRFLOW_LOAD_EXAMPLES="False"

# Dremio Configuration (SQL Federation Engine - optimized for M4)
DREMIO_STORAGE_SIZE="20Gi"           # More storage for data
DREMIO_MEMORY_REQUEST="2Gi"          # Dremio needs more memory
DREMIO_MEMORY_LIMIT="4Gi"            # M4 can handle it
DREMIO_CPU_REQUEST="1000m"
DREMIO_CPU_LIMIT="3000m"

# Redpanda Configuration (Kafka-compatible streaming - optimized for M4)
REDPANDA_STORAGE_SIZE="10Gi"
REDPANDA_MEMORY_REQUEST="1Gi"        # Better performance
REDPANDA_MEMORY_LIMIT="3Gi"
REDPANDA_CPU_REQUEST="1000m"
REDPANDA_CPU_LIMIT="2000m"

# ZincSearch Configuration (Lightweight search engine - optimized for M4)
ZINCSEARCH_STORAGE_SIZE="10Gi"
ZINCSEARCH_MEMORY_REQUEST="512Mi"    # Increased
ZINCSEARCH_MEMORY_LIMIT="1Gi"
ZINCSEARCH_CPU_REQUEST="500m"
ZINCSEARCH_CPU_LIMIT="1000m"
ZINCSEARCH_ADMIN_USER="admin"
ZINCSEARCH_ADMIN_PASSWORD="admin"

# Dex Configuration (OIDC identity provider)
DEX_MEMORY_REQUEST="128Mi"
DEX_MEMORY_LIMIT="256Mi"
DEX_CPU_REQUEST="100m"
DEX_CPU_LIMIT="200m"

# Postfix Configuration (Email server)
POSTFIX_MEMORY_REQUEST="128Mi"
POSTFIX_MEMORY_LIMIT="256Mi"
POSTFIX_CPU_REQUEST="100m"
POSTFIX_CPU_LIMIT="200m"
POSTFIX_DOMAIN="example.com"

# =============================================================================
# TIMEOUT CONFIGURATION
# =============================================================================

# Deployment wait timeouts (in seconds)
POSTGRES_STARTUP_TIMEOUT="120"
MINIO_STARTUP_TIMEOUT="120"
SPARK_MASTER_STARTUP_TIMEOUT="180"
SPARK_WORKER_STARTUP_TIMEOUT="180"
AIRFLOW_WEBSERVER_STARTUP_TIMEOUT="300"
AIRFLOW_SCHEDULER_STARTUP_TIMEOUT="180"
DREMIO_STARTUP_TIMEOUT="600"  # Dremio can take 3-5 minutes
REDPANDA_STARTUP_TIMEOUT="180"
ZINCSEARCH_STARTUP_TIMEOUT="120"
DEX_STARTUP_TIMEOUT="60"
POSTFIX_STARTUP_TIMEOUT="120"

# =============================================================================
# DEVELOPMENT FLAGS
# =============================================================================

DEVELOPMENT_MODE="true"
VERBOSE_LOGGING="false"

# Auto-cleanup failed pods
AUTO_CLEANUP_FAILED_PODS="false"

# Log tail lines for status display
DEFAULT_LOG_LINES="50"

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================

# NodePort range (30000-32767 is Kubernetes default)
# If you need specific ports, configure them in the service manifests

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================

# Default storage class for PVCs
STORAGE_CLASS="standard"

# =============================================================================
# RESOURCE REQUIREMENTS SUMMARY (OPTIMIZED FOR APPLE M4)
# =============================================================================
#
# Hardware: Apple M4 MacBook Pro (10 cores, 16GB RAM)
# Strategy: Use 60-75% of resources, leave headroom for macOS
#
# Individual Service Memory Requirements (M4 Optimized):
#   PostgreSQL:  ~2Gi    (standalone database)
#   MinIO:       ~1Gi    (was 512Mi)
#   Dremio:      ~4Gi    (was 2Gi) - Heavy JVM workload
#   Spark:       ~8Gi    (Master: 2Gi, 2 Workers: 3Gi each)
#   Airflow:     ~5Gi    (Postgres: 1Gi, Webserver: 2Gi, Scheduler: 2Gi)
#   Redpanda:    ~3Gi    (was 2Gi)
#   ZincSearch:  ~1Gi    (was 512Mi)
#   Dex:         ~256Mi  (unchanged - lightweight)
#   Postfix:     ~256Mi  (unchanged - lightweight)
#
# Example Stack Configurations for M4:
#
# Minimal Database:
#   Memory: ~2Gi, CPU: ~1000m
#   Minikube: --cpus=2 --memory=4096
#   ENABLED_SERVICES="postgres"
#
# Database + Storage:
#   Memory: ~3Gi, CPU: ~1500m
#   Minikube: --cpus=4 --memory=6144
#   ENABLED_SERVICES="postgres,minio"
#
# Basic Data Stack (MinIO + Spark):
#   Memory: ~9Gi, CPU: ~5000m
#   Minikube: --cpus=4 --memory=10240
#
# SQL Federation (PostgreSQL + MinIO + Dremio):
#   Memory: ~7Gi, CPU: ~5000m
#   Minikube: --cpus=6 --memory=10240
#
# Full Orchestration (PostgreSQL + MinIO + Spark + Airflow):
#   Memory: ~16Gi, CPU: ~9000m
#   Minikube: --cpus=6 --memory=16384  # Tight fit on 16GB M4, use postgres standalone
#
# Streaming Platform (Redpanda + Spark + MinIO):
#   Memory: ~12Gi, CPU: ~8000m
#   Minikube: --cpus=6 --memory=12288
#
# Complete Platform (All 9 Services):
#   Memory: ~25Gi+ (TOO MUCH for 16GB M4!)
#   CPU: ~16000m+
#   ⚠️  NOT RECOMMENDED - requires 32GB+ RAM
#   Recommendation: Use 4-5 services max on 16GB M4
#
# Recommended Minikube Configurations for M4:
#
# Conservative (1-3 services):
#   MINIKUBE_CPUS="4"           # 40% of cores
#   MINIKUBE_MEMORY="8192"      # 8GB (50% of RAM)
#   MINIKUBE_DISK_SIZE="20g"
#
# Balanced (3-5 services) - RECOMMENDED:
#   MINIKUBE_CPUS="6"           # 60% of cores
#   MINIKUBE_MEMORY="12288"     # 12GB (75% of RAM)
#   MINIKUBE_DISK_SIZE="40g"
#
# Aggressive (5-6 services) - Use with caution:
#   MINIKUBE_CPUS="8"           # 80% of cores
#   MINIKUBE_MEMORY="14336"     # 14GB (87% of RAM)
#   MINIKUBE_DISK_SIZE="40g"
#   ⚠️  May cause macOS to swap heavily
#
# M4 Performance Tips:
# - Enable metrics-server addon for monitoring
# - Use fewer, larger workers instead of many small ones
# - Dremio benefits significantly from M4's performance cores
# - Consider selective service deployment based on workload
#
# =============================================================================
