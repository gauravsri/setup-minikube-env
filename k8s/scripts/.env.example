# =============================================================================
# Minikube Environment Configuration Template
# =============================================================================
# Copy this file to your project's scripts/.env and customize as needed

# Project Configuration
PROJECT_NAME="my-project"
PROJECT_DESCRIPTION="My Project Description"

# Template Repository Path
# For git submodule: "../setup-minikube-env"
# For local copy: "../../setup-minikube-env"
TEMPLATE_PATH="../setup-minikube-env"

# Kubernetes Configuration
NAMESPACE="${PROJECT_NAME}"

# Service Selection - Choose what you need
# Available: minio, postgres, dremio, spark, airflow, redpanda, zincsearch, dex, postfix
ENABLED_SERVICES="minio,spark,airflow"

# Service combination examples (updated for Spark on Kubernetes):
# Basic Data Stack (Spark on Kubernetes):
# ENABLED_SERVICES="minio,spark"

# Database Stack:
# ENABLED_SERVICES="postgres,minio"

# SQL Federation Stack:
# ENABLED_SERVICES="minio,postgres,dremio"

# Full Data Platform (Recommended for M4 16GB):
# ENABLED_SERVICES="postgres,minio,spark,airflow,dremio"

# Full Orchestration Stack (without Dremio):
# ENABLED_SERVICES="minio,postgres,spark,airflow"

# Streaming Platform (Spark on Kubernetes):
# ENABLED_SERVICES="redpanda,spark,minio"

# Search & Analytics:
# ENABLED_SERVICES="postgres,minio,zincsearch"

# Authentication & Communication:
# ENABLED_SERVICES="dex,postfix"

# Complete Platform (all 9 services - works on M4 16GB with Spark on Kubernetes!):
# ENABLED_SERVICES="minio,postgres,dremio,spark,airflow,redpanda,zincsearch,dex,postfix"

# =============================================================================
# MINIKUBE CONFIGURATION
# =============================================================================

# Minikube resource allocation - Choose based on your hardware:

# --- For Apple M4 Max (16 cores, 48GB RAM) - RECOMMENDED ---
# Balanced (5-7 services):
MINIKUBE_CPUS="12"            # Use 12 of 16 cores
MINIKUBE_MEMORY="32768"       # 32GB (leave 16GB for macOS)
MINIKUBE_DISK_SIZE="80g"
MINIKUBE_DRIVER="docker"      # Docker Desktop with Apple Silicon support

# Maximum (ALL 9 services):
# MINIKUBE_CPUS="14"           # Use 14 of 16 cores
# MINIKUBE_MEMORY="40960"      # 40GB (leave 8GB for macOS)
# MINIKUBE_DISK_SIZE="100g"

# --- For Apple M4 (10 cores, 16GB RAM) ---
# Balanced (3-5 services):
# MINIKUBE_CPUS="6"            # Use 6 of 10 cores
# MINIKUBE_MEMORY="12288"      # 12GB (leave 4GB for macOS)
# MINIKUBE_DISK_SIZE="40g"

# Conservative (1-3 services):
# MINIKUBE_CPUS="4"
# MINIKUBE_MEMORY="8192"       # 8GB
# MINIKUBE_DISK_SIZE="20g"

# Minikube addons (optional)
# MINIKUBE_ADDONS="metrics-server,dashboard,ingress"

# =============================================================================
# SERVICE-SPECIFIC CONFIGURATION
# =============================================================================

# MinIO Configuration (optimized for M4 Max - 48GB RAM)
MINIO_STORAGE_SIZE="30Gi"       # 3x M4 (10Gi)
MINIO_ROOT_USER="minioadmin"
MINIO_ROOT_PASSWORD="minioadmin"
MINIO_MEMORY_REQUEST="1Gi"      # Doubled from M4
MINIO_MEMORY_LIMIT="2Gi"        # Doubled from M4
MINIO_CPU_REQUEST="500m"
MINIO_CPU_LIMIT="2000m"         # M4 Max can handle more

# Spark Configuration - Spark on Kubernetes (No standalone cluster needed!)
# NOTE: "spark" service now deploys RBAC + PVC only (no persistent pods)
# Pods are created dynamically when jobs run via spark-submit
# Configure executor resources in your spark-submit commands or DAGs

# Recommended Spark on Kubernetes configurations for M4 Max (48GB RAM, 16 cores):
#
# For M4 Max, use these in your spark-submit commands:
#   --conf spark.executor.instances=4        # 4 executors (vs 2 on M4)
#   --conf spark.executor.memory=4g          # 4GB per executor (vs 2g on M4)
#   --conf spark.executor.cores=3            # 3 cores per executor (vs 1 on M4)
#   --conf spark.driver.memory=2g            # 2GB driver (vs 1g on M4)
#   --conf spark.driver.cores=2              # 2 cores for driver
#
# Total: 4 executors Ã— 4GB = 16GB + 2GB driver = 18GB (vs ~6GB on M4)
#
# For base M4 (16GB RAM), use lighter settings:
#   --conf spark.executor.instances=2
#   --conf spark.executor.memory=2g
#   --conf spark.executor.cores=1
#   --conf spark.driver.memory=1g

# Optional: Project path for PV (if using hostPath)
# SPARK_PROJECT_PATH="/path/to/your/project"

# Benefits of Spark on Kubernetes (vs standalone cluster):
# - No idle cluster pods = ~6Gi memory saved
# - Dynamic resource allocation
# - Better Kubernetes integration
# - Automatic cleanup after job completion

# PostgreSQL Configuration (Standalone Database Service - M4 Max optimized)
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="postgres"
POSTGRES_DB="postgres"
POSTGRES_STORAGE_SIZE="15Gi"    # 3x M4 (5Gi)
POSTGRES_MEMORY_REQUEST="1Gi"   # Doubled from M4
POSTGRES_MEMORY_LIMIT="4Gi"     # Doubled from M4
POSTGRES_CPU_REQUEST="500m"
POSTGRES_CPU_LIMIT="2000m"      # Doubled from M4

# Airflow Configuration
AIRFLOW_ADMIN_USER="admin"
AIRFLOW_ADMIN_PASSWORD="admin"
AIRFLOW_ADMIN_EMAIL="admin@example.com"

# Airflow Database Configuration (uses standalone postgres if enabled, or embedded)
AIRFLOW_POSTGRES_HOST="postgres"      # Set to "postgres" to use standalone service
AIRFLOW_POSTGRES_USER="airflow"
AIRFLOW_POSTGRES_PASSWORD="airflow"
AIRFLOW_POSTGRES_DB="airflow"
AIRFLOW_POSTGRES_STORAGE_SIZE="10Gi"  # Doubled from M4 (5Gi)
AIRFLOW_POSTGRES_MEMORY_REQUEST="1Gi" # Doubled from M4
AIRFLOW_POSTGRES_MEMORY_LIMIT="2Gi"   # Doubled from M4

AIRFLOW_WEBSERVER_MEMORY_REQUEST="2Gi"    # Doubled from M4
AIRFLOW_WEBSERVER_MEMORY_LIMIT="4Gi"      # Doubled from M4 (2Gi)
AIRFLOW_WEBSERVER_CPU_REQUEST="1000m"
AIRFLOW_WEBSERVER_CPU_LIMIT="3000m"       # Increased from M4 (2000m)

AIRFLOW_SCHEDULER_MEMORY_REQUEST="2Gi"    # Doubled from M4
AIRFLOW_SCHEDULER_MEMORY_LIMIT="4Gi"      # Doubled from M4 (2Gi)
AIRFLOW_SCHEDULER_CPU_REQUEST="1000m"
AIRFLOW_SCHEDULER_CPU_LIMIT="3000m"       # Increased from M4 (2000m)

# Airflow executor type
AIRFLOW_EXECUTOR="LocalExecutor"  # Options: LocalExecutor, CeleryExecutor, KubernetesExecutor

# Load example DAGs
AIRFLOW_LOAD_EXAMPLES="False"

# Dremio Configuration (SQL Federation Engine - optimized for M4 Max)
DREMIO_STORAGE_SIZE="50Gi"           # 2.5x M4 (20Gi)
DREMIO_MEMORY_REQUEST="4Gi"          # Doubled from M4 (2Gi)
DREMIO_MEMORY_LIMIT="8Gi"            # Doubled from M4 (4Gi)
DREMIO_CPU_REQUEST="2000m"           # Doubled from M4
DREMIO_CPU_LIMIT="6000m"             # Doubled from M4 (3000m)

# Redpanda Configuration (Kafka-compatible streaming - optimized for M4 Max)
REDPANDA_STORAGE_SIZE="30Gi"         # 3x M4 (10Gi)
REDPANDA_MEMORY_REQUEST="2Gi"        # Doubled from M4 (1Gi)
REDPANDA_MEMORY_LIMIT="6Gi"          # Doubled from M4 (3Gi)
REDPANDA_CPU_REQUEST="2000m"         # Doubled from M4
REDPANDA_CPU_LIMIT="4000m"           # Doubled from M4 (2000m)

# ZincSearch Configuration (Lightweight search engine - optimized for M4 Max)
ZINCSEARCH_STORAGE_SIZE="20Gi"       # Doubled from M4 (10Gi)
ZINCSEARCH_MEMORY_REQUEST="1Gi"      # Doubled from M4 (512Mi)
ZINCSEARCH_MEMORY_LIMIT="2Gi"        # Doubled from M4 (1Gi)
ZINCSEARCH_CPU_REQUEST="1000m"       # Doubled from M4
ZINCSEARCH_CPU_LIMIT="2000m"         # Doubled from M4 (1000m)
ZINCSEARCH_ADMIN_USER="admin"
ZINCSEARCH_ADMIN_PASSWORD="admin"

# Dex Configuration (OIDC identity provider)
DEX_MEMORY_REQUEST="128Mi"
DEX_MEMORY_LIMIT="256Mi"
DEX_CPU_REQUEST="100m"
DEX_CPU_LIMIT="200m"

# Postfix Configuration (Email server)
POSTFIX_MEMORY_REQUEST="128Mi"
POSTFIX_MEMORY_LIMIT="256Mi"
POSTFIX_CPU_REQUEST="100m"
POSTFIX_CPU_LIMIT="200m"
POSTFIX_DOMAIN="example.com"

# =============================================================================
# TIMEOUT CONFIGURATION
# =============================================================================

# Deployment wait timeouts (in seconds)
POSTGRES_STARTUP_TIMEOUT="120"
MINIO_STARTUP_TIMEOUT="120"
SPARK_MASTER_STARTUP_TIMEOUT="180"
SPARK_WORKER_STARTUP_TIMEOUT="180"
AIRFLOW_WEBSERVER_STARTUP_TIMEOUT="300"
AIRFLOW_SCHEDULER_STARTUP_TIMEOUT="180"
DREMIO_STARTUP_TIMEOUT="600"  # Dremio can take 3-5 minutes
REDPANDA_STARTUP_TIMEOUT="180"
ZINCSEARCH_STARTUP_TIMEOUT="120"
DEX_STARTUP_TIMEOUT="60"
POSTFIX_STARTUP_TIMEOUT="120"

# =============================================================================
# DEVELOPMENT FLAGS
# =============================================================================

DEVELOPMENT_MODE="true"
VERBOSE_LOGGING="false"

# Auto-cleanup failed pods
AUTO_CLEANUP_FAILED_PODS="false"

# Log tail lines for status display
DEFAULT_LOG_LINES="50"

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================

# NodePort range (30000-32767 is Kubernetes default)
# If you need specific ports, configure them in the service manifests

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================

# Default storage class for PVCs
STORAGE_CLASS="standard"

# =============================================================================
# RESOURCE REQUIREMENTS SUMMARY (OPTIMIZED FOR APPLE M4 MAX)
# =============================================================================
#
# Hardware: Apple M4 Max MacBook Pro (16 cores [12P+4E], 48GB RAM)
# Strategy: Use 75-85% of resources, plenty of headroom for macOS
#
# Individual Service Memory Requirements (M4 Max Optimized):
#   PostgreSQL:  ~4Gi    (standalone database) - 2x M4
#   MinIO:       ~2Gi    (was 1Gi on M4)
#   Dremio:      ~8Gi    (was 4Gi on M4) - Heavy JVM workload
#   Spark:       ~20Gi   (Master: 4Gi, 4 Workers: 6Gi each) - 2.5x M4
#   Airflow:     ~10Gi   (Postgres: 2Gi, Webserver: 4Gi, Scheduler: 4Gi) - 2x M4
#   Redpanda:    ~6Gi    (was 3Gi on M4)
#   ZincSearch:  ~2Gi    (was 1Gi on M4)
#   Dex:         ~256Mi  (unchanged - lightweight)
#   Postfix:     ~256Mi  (unchanged - lightweight)
#
# Total for ALL 9 services: ~52Gi (comfortably fits in 40GB Minikube allocation)
#
# Example Stack Configurations for M4 Max:
#
# Minimal Database:
#   Memory: ~4Gi, CPU: ~2000m
#   Minikube: --cpus=4 --memory=6144
#   ENABLED_SERVICES="postgres"
#
# Database + Storage:
#   Memory: ~6Gi, CPU: ~3000m
#   Minikube: --cpus=6 --memory=8192
#   ENABLED_SERVICES="postgres,minio"
#
# Basic Data Stack (MinIO + Spark):
#   Memory: ~22Gi, CPU: ~10000m
#   Minikube: --cpus=10 --memory=24576
#   ENABLED_SERVICES="minio,spark"
#
# SQL Federation (PostgreSQL + MinIO + Dremio):
#   Memory: ~14Gi, CPU: ~10000m
#   Minikube: --cpus=10 --memory=16384
#   ENABLED_SERVICES="postgres,minio,dremio"
#
# Full Orchestration (PostgreSQL + MinIO + Spark + Airflow):
#   Memory: ~36Gi, CPU: ~18000m
#   Minikube: --cpus=12 --memory=40960
#   ENABLED_SERVICES="postgres,minio,spark,airflow"
#
# Streaming Platform (Redpanda + Spark + MinIO):
#   Memory: ~28Gi, CPU: ~14000m
#   Minikube: --cpus=12 --memory=32768
#   ENABLED_SERVICES="redpanda,spark,minio"
#
# Complete Platform (All 9 Services) - âœ… NOW POSSIBLE on M4 Max!
#   Memory: ~52Gi, CPU: ~24000m
#   Minikube: --cpus=14 --memory=40960 --disk-size=100g
#   ENABLED_SERVICES="postgres,minio,dremio,spark,airflow,redpanda,zincsearch,dex,postfix"
#   âœ… Runs comfortably with room to spare!
#
# Recommended Minikube Configurations for M4 Max:
#
# Conservative (1-5 services):
#   MINIKUBE_CPUS="8"           # 50% of cores
#   MINIKUBE_MEMORY="16384"     # 16GB (33% of RAM)
#   MINIKUBE_DISK_SIZE="60g"
#
# Balanced (5-7 services) - RECOMMENDED:
#   MINIKUBE_CPUS="12"          # 75% of cores
#   MINIKUBE_MEMORY="32768"     # 32GB (67% of RAM)
#   MINIKUBE_DISK_SIZE="80g"
#
# Maximum (ALL 9 services):
#   MINIKUBE_CPUS="14"          # 87% of cores
#   MINIKUBE_MEMORY="40960"     # 40GB (83% of RAM)
#   MINIKUBE_DISK_SIZE="100g"
#   âœ… Plenty of headroom for macOS
#
# M4 Max Performance Tips:
# - Enable metrics-server addon for monitoring
# - Use 4-6 Spark workers with 3-4 cores each
# - Dremio benefits massively from M4 Max's 12 performance cores
# - You can run ALL services simultaneously for integration testing
# - Still have 8GB+ free for macOS and other apps
#
# Comparison: M4 Max vs Base M4
# - 3x RAM (48GB vs 16GB)
# - 60% more cores (16 vs 10)
# - 200% more performance cores (12 vs 4)
# - Can run ALL 9 services (vs 5-6 max on base M4)
#
# =============================================================================
